#!/bin/bash

# Copyright 2023 brobeson

# if [[ $# == 0 || $1 == "help" ]]
# then
#     echo "NAME"
#     echo "    git sync"
#     echo
#     echo "SYNOPSIS"
#     echo "    git sync [help] <remote> [<branch>]"
#     echo
#     echo "DESCRIPTION"
#     echo "    Fetch from the specified remote repository, merge to every local branch, and"
#     echo "    push each local branch to your origin remote. If merging to a local branch"
#     echo "    would result in merge conflicts, the merge and push does not occur. <branch>"
#     echo "    is the remote branch you want to merge into your local branches; if omitted,"
#     echo "    it defaults to master."
#     echo
#     echo "OPTIONS"
#     echo "    help"
#     echo "        Display this help, then exit."
#     echo
#     exit 0
# fi

# Ensure this is a git repository.
if ! git rev-parse &>/dev/null; then
	echo >&2 "error: $(pwd) does not appear to be a git repository"
	exit 1
fi

# Ensure there are no changes or new files.
if [[ $(git status --porcelain) != "" ]]; then
	echo >&2 "error: please stash your changes and new files"
	exit 1
fi

if ! git remote | grep -q '^upstream$'; then
	echo >&2 "error: $(pwd) does not have an 'upstream' remote"
	exit 1
fi

# Get the name of the HEAD branch from upstream.
HEAD=$(git remote show upstream | grep 'HEAD branch')
HEAD=${HEAD//  HEAD branch: /}

# Record the current branch, so we can switch back to it later.
current_branch="$(git rev-parse --abbrev-ref HEAD)"

# Fetch, merge, and push
git switch "${HEAD}"
git fetch upstream "${HEAD}"
git merge --ff-only upstream/"${HEAD}"
git push origin "${HEAD}"
git submodule update --recursive

# Now go back to the original branch the user was on.
git switch "${current_branch}"

exit 0

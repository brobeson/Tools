*glsl.txt*          For Vim version 7.4.        Last change: 2015 July 30

            Syntax Highlighting for OpenGL Shading Language (GLSL)

This plugin provides syntax highlighting for GLSL files. The syntax items were
defined using the OpenGL Shading Language 4.50 Reference Card and doesn't
attempt to be backward compatible. That is, anything removed from previous
language versions won't be highlighted.

GLSL Syntax Definitions                         *glsl-syntax*

This section describes the syntax groups defined in the file, and lists the
default linking. You can use this as a reference to override the highlighting
if you so desire.

glslBoolean         The constants 'true' and 'false'. By default, this links
                    to Constant.

glslComment         Code comments. The default highlighting is Comment.

glslComponent       This encapsulates valid vector components:
                        someVector.xyzw;~
                        someColor.rgba;~
                        texCoords.stpq;~
                    The default highlighting is Special. See glslMixedComps
                    for a discussion of invalid vector components.

glslConditional     If, else, and case statements. The default highlighting is
                    Conditional.

glslConstant        These are named constants built into the language, such as
                    gl_MaxDrawBuffers. The default highlight link is to
                    Constant.

glslExtAll          The keyword 'all' to specify a behavior for all possible
                    extensions. The default highlighting is Keyword.

glslExtBehavior     The possible extension behaviors to use with the
                    #extension preprocessor. The default highlighting is
                    Keyword.

glslExtName         A string used to identify an extension in the #extension
                    preprocessor directive. The default highlighting is
                    String.

glslFloat           Floating point number literals. The default highlighting
                    is Number.

glslFunction        These are the built in functions, such as clamp and dFdx.
                    By default, they link to Identifier.

glslHex             Hexadecimal numbers. The default highlighting is Number.

glslHexZero         The leading '0x' necessary to specify a hexadecimal
                    number. This allows highlighting the '0x' different from
                    the hex digits if desired. The default highlighting is
                    Number.

glslInteger         Decimal integers. The default highlighting is Number.

glslLabel           The case and default statements (within a swtich
                    statement). The default highlighting is Label.

glslMacro           The predefined macros, such as __LINE__. The default
                    highlighting is Macro.

glslMixedComps      Technically, GLSL does not allow vector components to be
                    mixed across conceptual types. That is, a shader cannot
                    contain the statement
                        // mixing cartesian and color components~
                        vec2 foo = someVec.xg;~
                    By default, such components are highlit as an error.
                    However, it's concievable that a programmer might create a
                    structure member named 'xg', which would highlight as an
                    error. If you want to avoid that behavior, create a new
                    link for glslMixedComps.

glslOctal           Octal integers. The default highlighting is Number.

glslOctalZero       The leading '0' necessary to specify an octal number. This
                    allows highlighting the '0x' different from the octal
                    digits if desired. The default highlighting is Number.

glslOpaqueType      These are the opaque types built into the language. It
                    includes keywords such as 'atomic_uint' and 'image3D'. The
                    default highlighting link is to Type.

glslPPDefine        #define and #undef preprocessor directives. The default
                    highlighting is PreProc.

glslPPError         The #error preprocessor directive. The default
                    highlighting is PreProc.

glslPPExtension     The #extension preprocessor directive. The default
                    highlighting is PreProc.

glslPPLine          The #line preprocessor directive. The default highlighting
                    is PreProc.

glslPragmaOptions   The options that can be used in a #pragma directive:
                    optimize and debug. The default highlighting is Keyword.

glslPragmaValues    The on and off constants passed to the pragma options. The
                    default highlighting is Constant.

glslProfile         The profile keywords (core, compatibility, and es) used in
                    the #version preprocessor directive. The default
                    highlighting is Keyword.

glslRepeat          The loop statements: do, for, and while. The default
                    highlighting is Repeat.

glslReserved        This is anything reserved by the language for future use.
                    For example, anything begining with 'gl_' is reserved and
                    cannot be used as an identifier. The default highlight
                    link is to Error.

glslStatement       The break, return, continue, and discard statements. The
                    default highlighting is Statement.

glslStructure       The 'struct' keyword. The default highlighting link is to
                    Structure.

glslTodo            The typical comment tags: TODO, FIXME, XXX, HACK, and BUG.
                    The default highlighting is Todo.

glslTransparentType These are the transparent data types in the language:
                    basic scalars, vectors, and matrices. The default
                    highlighting is Type.

glslVariable        This encompasses all the built in variables, like
                    gl_ClipDistance and gl_FragCoord. The default highlighting
                    is Identifier.

glslVersion         The #version preprocessor directive. The default
                    highlighting is PreProc.

vim:tw=78:ts=8:ft=help:norl:


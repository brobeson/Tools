*glsl.txt*          For Vim version 7.4.        Last change: 2015 July 30

            OpenGL Shading Language (GLSL) for Vim

This set of plugins provides functionality for editing OpenGL Shading Language
source code in Vim.

1. Syntax Highlighting                          |glsl-syntax|
2. Automatic Indentation                        |glsl-indent|
3. Filetype Plugin                              |glsl-ftplugin|

=============================================================================
1. Syntax Highlighting                          *glsl-syntax*

This plugin provides syntax highlighting for GLSL files. The syntax items were
defined using the OpenGL Shading Language 4.50 Reference Card and doesn't
attempt to be backward compatible. That is, anything removed from previous
language versions won't be highlighted.

There are a few configuration variables the user can define to control some of
the highlighting options.

glsl_enable_the_world                           *glsl_enable_the_world*
If you want to enable all the optional highlighting, you can just define this
variable. This saves you from cluttering your |.vimrc| with a bunch of glsl_
variables.

glsl_mixed_comps_error                          *glsl_mixed_comps_error*
Define this variable to highlight mixed vector components. Mixed components are
those that are of different fundamental types. For example, it's illegal to
refer to a color component in the same swizzle as a spatial or texture
component.

glsl_tab_space_error                            *glsl_tab_space_error*
Define this variable if you want to highlight spaces which are immediately
followed by a tab.

glsl_trail_space_error                          *glsl_trail_space_error*
Define this variable if you want trailing white space to be highlighted.

The GLSL syntax file creates several syntax groups, which are linked by default
to standard syntax highlighting groups. Ergo, everything should work, out of
the box, with your preferred color scheme. However, if you so desire, you can
tweak things a bit by creating your own links. Described below are the GLSL
syntax groups and what the default highlighting is.

glslBoolean         Defaults to Constant.
    The constants 'true' and 'false'.

glslComment         Defaults to Comment.
    Code comments.

glslComponent       Defaults to Special.
    This encapsulates valid vector components, in their legal combinations: >
        position.xyzw;
        color.rgba;
        color.rrra;
        texCoords.stpq;
<    See glslMixedComps for a discussion of invalid vector components.

glslConditional     Defaults to Conditional.
    The 'if', 'else', and 'case' statements.

glslConstant        Defaults to Constant.
    These are named constants built into the language, such as
    'gl_MaxDrawBuffers'.

glslDecimal         Defaults to Number.
    Decimal integers.

glslDefine          Defaults to PreProc.
    The '#define' and '#undef' preprocessor directives. This does not highlight
    text following the '#define'.

glslError           Defaults to PreProc.
    The '#error' preprocessor directive. This includes the text following the
    '#error', unless that text is enclosed in quote marks. See glslErrorString
    for details.

glslErrorString     Defaults to String.
    The error message following the '#error' preprocessor directive. To be
    highlighted differently from glslError, the string must be enclosed in
    double quotes ("some error message").

glslExtAll          Defaults to Keyword.
    The keyword 'all' to specify a behavior for all possible extensions. This
    is used with '#extension' preprocessor directive.

glslExtension       Defaults to PreProc.
    The '#extension' preprocessor directive.

glslExtBehavior     Defaults to Constant.
    The possible extension behaviors to use with the '#extension' preprocessor.

glslFloat           Defaults to Number.
    Floating point number literals.

glslFunction        Defaults to Identifier.
    These are the built in functions, such as 'clamp' and 'dFdx'.

glslHex             Defaults to Number.
    Hexadecimal integers.

glslHexZero         Defaults to PreProc.
    The leading '0x' necessary to specify a hexadecimal number. This allows
    highlighting the '0x' different from the hex digits if desired.

glslLabel           Defaults to Label.
    The 'case' and 'default' statements (within a swtich statement).

glslLayout          Defaults to Keyword.
    The 'layout' and 'precision' statements.

glslLine            Defaults to PreProc.
    The '#line' preprocessor directive.

glslMacro           Defaults to Macro.
    The predefined macros, such as '__LINE__'.

glslMixedComps      Defaults to Error.
    Technically, GLSL does not allow vector components to be mixed across
    conceptual types. That is, a shader cannot contain the statement >
        vec2 foo = someVec.xg; // mixing cartesian and color components
<    However, it's concievable that a programmer might create a structure
    member named 'xg', which would highlight as an error. To enable
    highlighting mixed components, define the variable |glsl_mixed_comps_error|.

glslOctal           Defaults to Number.
    Octal integers.

glslOctalError      Defaults to Error.
    Octal integers which include the digits '8' or '9'.

glslOctalZero       Defaults to PreProc.
    The leading '0' necessary to specify an octal number. This allows
    highlighting the '0' different from the octal digits if desired.

glslOpaqueType      Defaults to Type.
    These are the opaque types built into the language. It includes keywords
    such as 'atomic_uint' and 'image3D'.

glslPragma          Defaults to PreProc.
    The '#pragma' preprocessor directive.

glslPragmaOptions   Defaults to Keyword.
    The options that can be used in a #pragma directive: 'optimize', 'debug',
    and 'STDGL'.

glslPragmaValues    Defaults to Constant.
    The 'all', 'off', and 'on' constants passed to the '#pragma' options.

glslPrecondition    Defaults to PreProc.
    The varous preprocessor conditional keywords: '#if' and such.

glslProfile         Defaults to Keyword.
    The profile keywords: 'core', 'compatibility', and 'es'. These are used in
    the '#version' preprocessor directive.

glslQualFormat      Defaults to Constant.
    The possible image format qualifiers, such as 'rgba32f' and 'r8_snorm'.

glslQualifier       Defaults to StorageClass.
    The various qualifiers, like 'uniform', 'in', etc.

glslRepeat          Defaults to Repeat.
    The loop statements: 'do', 'for', and 'while'.

glslReserved        Defaults to Error.
    This is anything reserved by the language for future use. For example,
    anything begining with 'gl_' is reserved and cannot be used as an
    identifier.

glslStatement       Defaults to Statement.
    The 'break', 'return', 'continue', and 'discard' statements.

glslStructure       Defaults to Structure.
    The 'struct' keyword.

glslTodo            Defaults to Todo.
    The typical comment tags: 'TODO', 'FIXME', 'XXX', 'HACK', and 'BUG'.

glslTransparentType Defaults to Type.
    These are the transparent data types in the language: basic scalars,
    vectors, and matrices.

glslVariable        Defaults to Identifier.
    This encompasses all the built in variables, like 'gl_ClipDistance' and
    'gl_FragCoord'.

glslVersion         Defaults to PreProc.
    The '#version' preprocessor directive.

=============================================================================
2. Automatic Indentation                        *glsl-indent*

GLSL source code is automatically indented just like C code in Vim. In fact,
it just uses the |'cindent'| option. Therefore, you can use other Vim
configuration options for C indentation. See |C-indenting| for details on
those options.

=============================================================================
3. Filetype Plugin                              *glsl-ftplugin*

The filetype plugin for GLSL sets format options identical to C. That is, it
- removes text wrapping in general,
- adds text wrapping for comments,
- adds autoinsertion of the comment leader after hitting <Enter> in insert
  mode, or 'o' or 'O' in normal mode,
- adds formatting of comments with the 'gq' command,
- adds not breaking long lines in insert mode.

The plugin also sets up formatting of dashed lists in comments.

The code fold method is set to syntax. All other code folding options are left
as their default values.

Finally, the plugin sets the file browse dialog to filter on .glsl files.

vim:tw=78:ts=8:ft=help:norl:

